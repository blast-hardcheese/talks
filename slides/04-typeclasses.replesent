:ballot_box_with_check: Option
:ballot_box_with_check: Refined types
:ballot_box: "Type classes"
---
Definitions

```
type AnnouncementId = Long
type UserId = Long
type Name = String

case class Image(url: String)

case class Announcement(id: AnnouncementId,
                        title: String,
                        thumbnail: Image,
                        text: String)

case class Account(id: UserId,
                name: Name,
                profileImage: Image)
```
---
Behavior:

```
@scala.annotation.implicitNotFound(
  "No type class Presentable in scope for ${T}")
trait Presentable[T] {
  def title(elem: T): String
  def displayImage(elem: T): Image
}

object Presentable {
  def title[T](elem: T
    )(implicit ev: Presentable[T]
    ) = ev.title(elem)

  def displayImage[T](elem: T
    )(implicit ev: Presentable[T]
    ) = ev.displayImage(elem)
}
```
---
Instances

```
implicit object PresentableAnnouncement extends Presentable[Announcement] {
  def title(elem: Announcement) = elem.title
  def displayImage(elem: Announcement) = elem.thumbnail
}

implicit object PresentableUser extends Presentable[Account] {
  def title(elem: Account) = elem.name
  def displayImage(elem: Account) = elem.profileImage
}
```
---
What do we get?

```
val user = Account(
  id=500L,
  name="testuser",
  profileImage=Image("http://example.com/500/profile.png"))

val userTitle = Presentable.title(user)
val userImage = Presentable.displayImage(user)
```
---
Easily extended

```
type PostId = Long
case class Post(id: PostId, title: String, thumbnail: Image)
```
--

```
implicit object PresentablePost extends Presentable[Post] {
  def title(elem: Post) = elem.title
  def displayImage(elem: Post) = elem.thumbnail
}
```
--

```
val post = Post(
  id=100L,
  title="Hello, world!",
  thumbnail=Image("http://example.com/100/thumb.png"))

val title = Presentable.title(post)
val image = Presentable.displayImage(post)
```
---
Easier:

```
object Presentable2 {
  def title(elem: Any): String = elem match {
    case elem: Announcement => elem.title
    case elem: Account => elem.name
  }

  def displayImage(elem: Any): Image = elem match {
    case elem: Announcement => elem.thumbnail
    case elem: Account => elem.profileImage
  }
}
```
--

```
val userTitle2 = Presentable2.title(user)
val userImage2 = Presentable2.displayImage(user)
```
--

```
lazy val postTitle2 = Presentable2.title(post)
```
# Nothing's perfect, the users will understand
--
```
//!/*
println(postTitle2)
//!*/
```
---
Why?
--

* Core doesn't change very much
--

* All behavior is defined in the same place (+1 for readability!)
---
