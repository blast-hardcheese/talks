/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package funscala.generated
import akka.http.scaladsl.model._
import akka.http.scaladsl.model.headers.RawHeader
import akka.http.scaladsl.unmarshalling.{ Unmarshal, Unmarshaller, FromEntityUnmarshaller, FromRequestUnmarshaller, FromStringUnmarshaller }
import akka.http.scaladsl.marshalling.{ Marshal, Marshaller, Marshalling, ToEntityMarshaller, ToResponseMarshaller }
import akka.http.scaladsl.server.Directives._
import akka.http.scaladsl.server.{ Directive, Directive0, Directive1, ExceptionHandler, MalformedFormFieldRejection, MalformedHeaderRejection, MissingFormFieldRejection, MalformedRequestContentRejection, Rejection, RejectionError, Route }
import akka.http.scaladsl.util.FastFuture
import akka.stream.{ IOResult, Materializer }
import akka.stream.scaladsl.{ FileIO, Keep, Sink, Source }
import akka.util.ByteString
import cats.{ Functor, Id }
import cats.data.EitherT
import cats.implicits._
import scala.concurrent.{ ExecutionContext, Future }
import scala.language.higherKinds
import scala.language.implicitConversions
import java.io.File
import java.security.MessageDigest
import java.util.concurrent.atomic.AtomicReference
import scala.util.{ Failure, Success }
import io.circe.Decoder
import scala.language.higherKinds
import _root_.funscala.generated.Implicits._
import _root_.funscala.generated.AkkaHttpImplicits._
import _root_.funscala.generated.definitions._
trait Handler { def login(respond: Resource.LoginResponse.type)(username: String, password: String): scala.concurrent.Future[Resource.LoginResponse] }
object Resource {
  def routes(handler: Handler)(implicit mat: akka.stream.Materializer): Route = {
    {
      path("login")(post(({
        implicit val FormDataUnmarshaller: FromRequestUnmarshaller[Either[Throwable, (Option[String], Option[String])]] = implicitly[FromRequestUnmarshaller[FormData]].flatMap {
          implicit executionContext => implicit mat => formData => {
            def unmarshalField[A: io.circe.Decoder](name: String, value: String, unmarshaller: Unmarshaller[String, io.circe.Json]): Future[A] = unmarshaller.andThen(jsonDecoderUnmarshaller[A]).apply(value).recoverWith({
              case ex =>
                Future.failed(RejectionError(MalformedFormFieldRejection(name, ex.getMessage, Some(ex))))
            })
            (formData.fields.get("username").traverse(unmarshalField[String]("username", _, jsonStringyUnmarshaller)), formData.fields.get("password").traverse(unmarshalField[String]("password", _, jsonStringyUnmarshaller))).mapN(Tuple2.apply).map(Right.apply)
          }
        }
        entity(as(Unmarshaller.firstOf(FormDataUnmarshaller))).flatMap(_.fold({
          case RejectionError(rej) =>
            reject(rej)
          case t =>
            throw t
        }, {
          case (usernameO, passwordO) =>
            val maybe: Either[Rejection, (String, String)] = for (username <- usernameO.toRight(MissingFormFieldRejection("username")); password <- passwordO.toRight(MissingFormFieldRejection("password"))) yield {
              (username, password)
            }
            maybe.fold(reject(_), tprovide(_))
        }))
      }: Directive[(String, String)]).apply((username, password) => complete(handler.login(LoginResponse)(username, password)))))
    }
  }
  sealed abstract class LoginResponse(val statusCode: StatusCode)
  case class LoginResponseOK(value: _root_.funscala.generated.definitions.LoginPreseed) extends LoginResponse(StatusCodes.OK)
  case object LoginResponseForbidden extends LoginResponse(StatusCodes.Forbidden)
  object LoginResponse {
    implicit def loginResponseTRM: ToResponseMarshaller[LoginResponse] = Marshaller {
      implicit ec => resp => loginResponseTR(resp)
    }
    implicit def loginResponseTR(value: LoginResponse)(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[List[Marshalling[HttpResponse]]] = value match {
      case r: LoginResponseOK =>
        Marshal(r.value).to[ResponseEntity].map {
          entity => Marshalling.Opaque {
            () => HttpResponse(r.statusCode, entity = entity)
          } :: Nil
        }
      case r: LoginResponseForbidden.type =>
        scala.concurrent.Future.successful(Marshalling.Opaque {
          () => HttpResponse(r.statusCode)
        } :: Nil)
    }
    def apply[T](value: T)(implicit ev: T => LoginResponse): LoginResponse = ev(value)
    implicit def OKEv(value: _root_.funscala.generated.definitions.LoginPreseed): LoginResponse = OK(value)
    def OK(value: _root_.funscala.generated.definitions.LoginPreseed): LoginResponse = LoginResponseOK(value)
    def Forbidden: LoginResponse = LoginResponseForbidden
  }
}
