/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package funscala.generated.support
sealed trait Presence[+T] extends _root_.scala.Product with _root_.scala.Serializable {
  def fold[R](ifAbsent: => R, ifPresent: T => R): R
  def map[R](f: T => R): Presence[R] = fold(Presence.absent, a => Presence.present(f(a)))
  def toOption: Option[T] = fold[Option[T]](None, Some(_))
}
object Presence {
  def absent[R]: Presence[R] = Absent
  def present[R](value: R): Presence[R] = Present(value)
  case object Absent extends Presence[Nothing] { def fold[R](ifAbsent: => R, ifValue: Nothing => R): R = ifAbsent }
  final case class Present[+T](value: T) extends Presence[T] { def fold[R](ifAbsent: => R, ifPresent: T => R): R = ifPresent(value) }
  def fromOption[T](value: Option[T]): Presence[T] = value.fold[Presence[T]](Absent)(Present(_))
  implicit object PresenceFunctor extends cats.Functor[Presence] { def map[A, B](fa: Presence[A])(f: A => B): Presence[B] = fa.fold[Presence[B]](Presence.absent, a => Presence.present(f(a))) }
}